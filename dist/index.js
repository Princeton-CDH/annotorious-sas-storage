(()=>{"use strict";var t={607:function(t,e,a){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(a(55)),r=n(a(732)),i=new Event("annotations-loaded");e.default=(t,e)=>{let a=new o.default(e.target,e.annotationEndpoint);return a.all().then((e=>{t.setAnnotations(e.items),document.dispatchEvent(i)})),t.on("createAnnotation",(async n=>(n.target.source=(0,r.default)(n.target.source,e),a.create(n).then((()=>{document.dispatchEvent(i)})),console.log(n),t.addAnnotation(n),n))),t.on("updateAnnotation",((n,o)=>{n.id,n.id=o.id,n.target.source=(0,r.default)(n.target.source,e),a.update(n),t.addAnnotation(n)})),t.on("deleteAnnotation",(t=>{a.delete(t.id)})),{adapter:a}}},55:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class a{constructor(t,e){this.canvasId=t,this.endpointUrl=e}get annotationPageId(){return`${this.endpointUrl}/search?uri=${this.canvasId}`}async create(t){return fetch(`${this.endpointUrl}/create`,{body:JSON.stringify(a.createV2Anno(t)),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then((()=>this.all())).catch((()=>this.all()))}async update(t){return fetch(`${this.endpointUrl}/update`,{body:JSON.stringify(a.createV2Anno(t)),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then((()=>this.all())).catch((()=>this.all()))}async delete(t){return fetch(`${this.endpointUrl}/destroy?uri=${encodeURIComponent(t)}`,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"DELETE"}).then((()=>this.all())).catch((()=>this.all()))}async get(t){const e=await this.all();return e?e.items.find((e=>e.id===t)):null}async all(){const t=await fetch(this.annotationPageId),e=await t.json();return this.createAnnotationPage(e)}static createV2Anno(t){let e=null;e=Array.isArray(t.body)?t.body.map((t=>this.createV2AnnoBody(t))):this.createV2AnnoBody(t.body);const a={"@id":t.id&&t.id.startsWith("http")?t.id:void 0,"@context":"http://iiif.io/api/presentation/2/context.json","@type":"oa:Annotation",motivation:"oa:commenting",on:{"@type":"oa:SpecificResource",full:t.target.source.id},resource:e};if(t.target.selector){if(Array.isArray(t.target.selector)){const e=t.target.selector.map((t=>{if(t){let e=this.createV2AnnoSelector(t);if(e)return e}}));a.on.selector={"@type":"oa:Choice",default:e[0],item:e[1]}}else{let e=this.createV2AnnoSelector(t.target.selector);e&&(a.on.selector=e)}t.target.source.partOf&&(a.on.within={"@id":t.target.source.partOf.id,"@type":"sc:Manifest"})}return a}static createV2AnnoBody(t){const e={"@type":"tagging"===t.purpose?"oa:Tag":"dctypes:Text",chars:t.value};return t.format&&(e.format=t.format),t.language&&(e.language=t.language),e}static createV2AnnoSelector(t){switch(t.type){case"SvgSelector":return{"@type":"oa:SvgSelector",value:t.value};case"FragmentSelector":return{"@type":"oa:FragmentSelector",value:t.value.replace("xywh=pixel:","xywh=")};default:return null}}createAnnotationPage(t){if(Array.isArray(t)){const e=t.map((t=>a.createV3Anno(t)));return{id:this.annotationPageId,items:e,type:"AnnotationPage"}}return t}static createV3Anno(t){let e=null;e=Array.isArray(t.resource)?t.resource.map((t=>this.createV3AnnoBody(t))):this.createV3AnnoBody(t.resource);let a=t.on;Array.isArray(a)&&([a]=a);let n={selector:a.selector?this.createV3AnnoSelector(a.selector):void 0,source:a.full};return a.within&&(n.source={id:a.full,partOf:{id:a.within["@id"],type:"Manifest"},type:"Canvas"}),{"@context":"http://www.w3.org/ns/anno.jsonld",id:t["@id"],motivation:"commenting",type:"Annotation",target:n,body:e}}static createV3AnnoBody(t){const e={type:"TextualBody",value:t.chars};return t.format&&(e.format=t.format),t.language&&(e.language=t.language),"oa:Tag"===t["@type"]&&(e.purpose="tagging"),e}static createV3AnnoSelector(t){switch(t["@type"]){case"oa:SvgSelector":return{type:"SvgSelector",value:t.value};case"oa:FragmentSelector":return{type:"FragmentSelector",conformsTo:"http://www.w3.org/TR/media-frags/",value:t.value?t.value.replace("xywh=","xywh=pixel:"):""};case"oa:Choice":return[t.default?this.createV3AnnoSelector(t.default):null,t.item?this.createV3AnnoSelector(t.item):null];default:return null}}}e.default=a},732:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>("string"==typeof t&&(t={id:e.target,partOf:{id:e.manifest,type:"Manifest"},type:"Canvas"}),t)}},e={},a=function a(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,a),r.exports}(607);module.exports=a})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,