(()=>{"use strict";var t={607:function(t,e,n){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=a(n(55)),r=a(n(732)),i=new Event("annotations-loaded");e.default=class{constructor(t,e){this.anno=t,this.settings=e,this.adapter=new o.default(e.target,e.annotationEndpoint),this.anno.on("createAnnotation",this.handleCreateAnnotation.bind(this)),this.anno.on("updateAnnotation",this.handleUpdateAnnotation.bind(this)),this.anno.on("deleteAnnotation",this.handleDeleteAnnotation.bind(this)),this.adapter.all().then((t=>{this.anno.setAnnotations(t.items),document.dispatchEvent(i)}))}async handleCreateAnnotation(t){return t.target.source=(0,r.default)(t.target.source,this.settings),this.adapter.create(t).then((()=>{document.dispatchEvent(i)})),this.anno.addAnnotation(t),t}handleUpdateAnnotation(t,e){t.id=e.id,t.target.source=(0,r.default)(t.target.source,this.settings),this.adapter.update(t),this.anno.addAnnotation(t)}handleDeleteAnnotation(t){this.adapter.delete(t.id)}}},55:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t,e){this.canvasId=t,this.endpointUrl=e}get annotationPageId(){return`${this.endpointUrl}/search?uri=${this.canvasId}`}async create(t){return fetch(`${this.endpointUrl}/create`,{body:JSON.stringify(n.createV2Anno(t)),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then((()=>this.all())).catch((()=>this.all()))}async update(t){return fetch(`${this.endpointUrl}/update`,{body:JSON.stringify(n.createV2Anno(t)),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then((()=>this.all())).catch((()=>this.all()))}async delete(t){return fetch(`${this.endpointUrl}/destroy?uri=${encodeURIComponent(t)}`,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"DELETE"}).then((()=>this.all())).catch((()=>this.all()))}async get(t){const e=await this.all();return e?e.items.find((e=>e.id===t)):null}async all(){const t=await fetch(this.annotationPageId),e=await t.json();return this.createAnnotationPage(e)}static createV2Anno(t){let e=null;e=Array.isArray(t.body)?t.body.map((t=>this.createV2AnnoBody(t))):this.createV2AnnoBody(t.body);const n={"@id":t.id&&t.id.startsWith("http")?t.id:void 0,"@context":"http://iiif.io/api/presentation/2/context.json","@type":"oa:Annotation",motivation:"oa:commenting",on:{"@type":"oa:SpecificResource",full:t.target.source.id},resource:e};if(t.target.selector){if(Array.isArray(t.target.selector)){const e=t.target.selector.map((t=>{if(t){const e=this.createV2AnnoSelector(t);if(e)return e}}));n.on.selector={"@type":"oa:Choice",default:e[0],item:e[1]}}else{const e=this.createV2AnnoSelector(t.target.selector);e&&(n.on.selector=e)}t.target.source.partOf&&(n.on.within={"@id":t.target.source.partOf.id,"@type":"sc:Manifest"})}return n}static createV2AnnoBody(t){const e={"@type":"tagging"===t.purpose?"oa:Tag":"dctypes:Text",chars:t.value};return t.format&&(e.format=t.format),t.language&&(e.language=t.language),e}static createV2AnnoSelector(t){switch(t.type){case"SvgSelector":return{"@type":"oa:SvgSelector",value:t.value};case"FragmentSelector":return{"@type":"oa:FragmentSelector",value:t.value.replace("xywh=pixel:","xywh=")};default:return null}}createAnnotationPage(t){if(Array.isArray(t)){const e=t.map((t=>n.createV3Anno(t)));return{id:this.annotationPageId,items:e,type:"AnnotationPage"}}return t}static createV3Anno(t){let e=null;e=Array.isArray(t.resource)?t.resource.map((t=>this.createV3AnnoBody(t))):this.createV3AnnoBody(t.resource);let n=t.on;Array.isArray(n)&&([n]=n);const a={selector:n.selector?this.createV3AnnoSelector(n.selector):void 0,source:n.full};return n.within&&(a.source={id:n.full,partOf:{id:n.within["@id"],type:"Manifest"},type:"Canvas"}),{"@context":"http://www.w3.org/ns/anno.jsonld",id:t["@id"],motivation:"commenting",type:"Annotation",target:a,body:e}}static createV3AnnoBody(t){const e={type:"TextualBody",value:t.chars};return t.format&&(e.format=t.format),t.language&&(e.language=t.language),"oa:Tag"===t["@type"]&&(e.purpose="tagging"),e}static createV3AnnoSelector(t){switch(t["@type"]){case"oa:SvgSelector":return{type:"SvgSelector",value:t.value};case"oa:FragmentSelector":return{type:"FragmentSelector",conformsTo:"http://www.w3.org/TR/media-frags/",value:t.value?t.value.replace("xywh=","xywh=pixel:"):""};case"oa:Choice":return[t.default?this.createV3AnnoSelector(t.default):null,t.item?this.createV3AnnoSelector(t.item):null];default:return null}}}e.default=n},732:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=(t,e)=>("string"==typeof t&&(t={id:e.target,partOf:{id:e.manifest,type:"Manifest"},type:"Canvas"}),t)}},e={},n=function n(a){var o=e[a];if(void 0!==o)return o.exports;var r=e[a]={exports:{}};return t[a].call(r.exports,r,r.exports,n),r.exports}(607);module.exports=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,